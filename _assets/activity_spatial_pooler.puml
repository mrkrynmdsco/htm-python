@startuml spatial_pooler
skinparam {
    shadowing true
    titleFontStyle bold
    roundCorner 15
    partitionFontSize 11
    partitionFontColor Black
    partitionFontStyle plain
    partitionBorderColor DimGray
    partitionBackgroundColor LightGray
    partitionBorderThickness 1
    noteFontSize 10
    noteBorderColor GoldenRod
    noteBorderThickness 2
    noteBackgroundColor LemonChiffon
}
skinparam activity {
    arrowColor DarkRed
    borderColor Ivory
    borderThickness 1.5
    backgroundColor Gold

    diamondBorderColor GoldenRod
    diamondBackgroundColor Ivory
}

title Spatial Pooling Algorithm\n\n

start

partition "Phase 1: Initialization" {
    :set input dimensions;
    :set column dimensions;
    while (for each column)
        rectangle "//initializing potential synapses//" #DarkGray {
            :assign random set of inputs within inhibition radius;
            :assign a synapse to an input;
            :assign random permanence to each synapse;
            note right
            **Permanence Value Criteria**
            ====
            1. The values are chosen to be
                in a small range around the
                **connection_threshold**.

            2. The values have a bias towards
                the column's natural center
                over the input region.
            end note
        }
    endwhile (done)
}

partition "Phase 2: Overlap" {
    while (for each column)

        :overlap_score = 0;
        :get connected_synapses;

        while (for each connected_synapses)
            if (synapse is active?) then (yes)
                :overlap_score++;
            else (no)
            endif
        endwhile (done)

        if (overlap_score > proximal_activation_threshold) then (no)
            :overlap_score = 0;
        else (yes)
            :overlap_score = overlap_score * boost;
        endif

    endwhile (done)
}

partition "Phase 3: Inhibition" {
    :inhibit;
}

partition "Phase 4: Learning" {
    :learn;
}

stop
@enduml